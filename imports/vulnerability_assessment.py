import subprocess

class VulnerabilityAssessment:
    @staticmethod
    def perform_vulnerability_checks(target):
        scan_results = VulnerabilityAssessment.run_vulnerability_scan(target)
        VulnerabilityAssessment.process_scan_results(scan_results)

    @staticmethod
    def run_vulnerability_scan(target):
        try:
            command = ['openvas-cli', '-c', 'Full and Fast', '-T', target]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()
            scan_results = output.decode()
            return scan_results
        except FileNotFoundError:
            print("openvas-cli tool not found. Install OpenVAS or provide another vulnerability scanning tool.")

    @staticmethod
    def process_scan_results(scan_results):
        print("Vulnerability scan results:")
        print(scan_results)

    @staticmethod
    def perform_web_vulnerability_scanning(target):
        try:
            subprocess.run(['zap', '-target', target, '-quickurl', target])
        except FileNotFoundError:
            print("OWASP ZAP tool not found. Install OWASP ZAP or provide another web vulnerability scanning tool.")

    @staticmethod
    def perform_network_vulnerability_scanning(target):
        scan_results = Scanning.run_network_scan(target)
        VulnerabilityAssessment.process_scan_results(scan_results)

    @staticmethod
    def run_network_scan(target):
        try:
            command = ['nmap', '-A', target]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()
            scan_results = output.decode()
            return scan_results
        except FileNotFoundError:
            print("nmap tool not found. Install nmap or provide another network vulnerability scanning tool.")


def perform_vulnerability_assessment(target):
    print("\nVulnerability Assessment:")
    print("1. Perform vulnerability checks")
    print("2. Perform web vulnerability scanning")
    print("3. Perform network vulnerability scanning")

    sub_choice = input("Enter your choice: ")

    if sub_choice == '1':
        VulnerabilityAssessment.perform_vulnerability_checks(target)
    elif sub_choice == '2':
        VulnerabilityAssessment.perform_web_vulnerability_scanning(target)
    elif sub_choice == '3':
        VulnerabilityAssessment.perform_network_vulnerability_scanning(target)
    else:
        print("Invalid choice. Please try again.")